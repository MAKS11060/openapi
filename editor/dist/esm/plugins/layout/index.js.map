{"version":3,"file":"plugins/layout/index.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../external module \"react-collapse-pane\"","../external module \"react/jsx-runtime.js\"","plugins/layout/components/Layout/Layout.jsx","plugins/layout/fn.js","../external module \"react\"","plugins/layout/hooks.js","plugins/layout/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"SplitPane\"]: () => __WEBPACK_EXTERNAL_MODULE_react_collapse_pane_f7052d83__.SplitPane });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"Fragment\"]: () => __WEBPACK_EXTERNAL_MODULE_react_jsx_runtime_js_fc12ce1a__.Fragment, [\"jsx\"]: () => __WEBPACK_EXTERNAL_MODULE_react_jsx_runtime_js_fc12ce1a__.jsx, [\"jsxs\"]: () => __WEBPACK_EXTERNAL_MODULE_react_jsx_runtime_js_fc12ce1a__.jsxs });","import PropTypes from 'prop-types';\nimport { SplitPane } from 'react-collapse-pane';\n\nconst Layout = ({ getComponent, useSwaggerEditorReactModal, useSplashScreen }) => {\n  const EditorPane = getComponent('EditorPane', true);\n  const EditorPreviewPane = getComponent('EditorPreviewPane', true);\n  const TopBar = getComponent('TopBar', true);\n  const Container = getComponent('Container'); // accessed from swagger-ui`\n  const Dropzone = getComponent('Dropzone', true);\n  const SplashScreen = getComponent('SplashScreen', true);\n  const ref = useSwaggerEditorReactModal();\n  const [canDisplaySplashScreen, canDisplayLayout] = useSplashScreen();\n\n  return (\n    <div className=\"swagger-editor__layout\" ref={ref}>\n      <SplashScreen isOpen={canDisplaySplashScreen} />\n      {canDisplayLayout && (\n        <>\n          <TopBar />\n          <Container className=\"container\">\n            <Dropzone>\n              <SplitPane split=\"vertical\">\n                <EditorPane />\n                <EditorPreviewPane />\n              </SplitPane>\n            </Dropzone>\n          </Container>\n        </>\n      )}\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  getComponent: PropTypes.func.isRequired,\n  useSwaggerEditorReactModal: PropTypes.func.isRequired,\n  useSplashScreen: PropTypes.func.isRequired,\n};\n\nexport default Layout;\n","const requestIdleCallbackPolyfill = (callback) => {\n  const start = Date.now();\n\n  return globalThis.setTimeout(() => {\n    callback({\n      didTimeout: false,\n      timeoutRemaining() {\n        return Math.max(0, 50 - (Date.now() - start));\n      },\n    });\n  }, 1);\n};\n\nconst cancelIdleCallbackPolyfill = (handle) => globalThis.clearTimeout(handle);\n\nexport const requestIdleCallback = globalThis.requestIdleCallback\n  ? (...args) => globalThis.requestIdleCallback(...args)\n  : requestIdleCallbackPolyfill;\n\nexport const cancelIdleCallback = globalThis.cancelIdleCallback\n  ? (...args) => globalThis.cancelIdleCallback(...args)\n  : cancelIdleCallbackPolyfill;\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"useEffect\"]: () => __WEBPACK_EXTERNAL_MODULE_react__.useEffect, [\"useState\"]: () => __WEBPACK_EXTERNAL_MODULE_react__.useState });","import { useEffect, useState } from 'react';\n\n/* eslint-disable */\n\n// eslint-disable-next-line import/prefer-default-export\nexport const makeUseSplashScreen = (getSystem) => () => {\n  const [canDisplaySplashScreen, setCanDisplaySplashScreen] = useState(true);\n  const [canDisplayLayout, setDisplayLayout] = useState(false);\n  const { fn } = getSystem();\n\n  useEffect(() => {\n    const callback = () => {\n      setDisplayLayout(true);\n    };\n    const requestId = fn.requestIdleCallback(callback);\n\n    return () => {\n      fn.cancelIdleCallback(requestId);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (canDisplayLayout) {\n      let requestID;\n\n      const callback = () => {\n        requestID = fn.requestIdleCallback(() => {\n          setCanDisplaySplashScreen(false);\n        });\n      };\n      const timeoutID = globalThis.setTimeout(callback, 1000);\n\n      return () => {\n        globalThis.clearTimeout(timeoutID);\n        fn.cancelIdleCallback(requestID);\n      };\n    }\n    return undefined;\n  }, [canDisplayLayout]);\n\n  return [canDisplaySplashScreen, canDisplayLayout];\n};\n","import Layout from './components/Layout/Layout.jsx';\nimport { requestIdleCallback, cancelIdleCallback } from './fn.js';\nimport { makeUseSplashScreen } from './hooks.js';\n\nconst LayoutPlugin = ({ getSystem }) => ({\n  rootInjects: {\n    useSplashScreen: makeUseSplashScreen(getSystem),\n  },\n  components: {\n    SwaggerEditorLayout: Layout,\n  },\n  fn: {\n    requestIdleCallback,\n    cancelIdleCallback,\n  },\n});\n\nexport default LayoutPlugin;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","x","d","__WEBPACK_EXTERNAL_MODULE_react_collapse_pane_f7052d83__","SplitPane","__WEBPACK_EXTERNAL_MODULE_react_jsx_runtime_js_fc12ce1a__","Fragment","jsx","jsxs","Layout","getComponent","useSwaggerEditorReactModal","useSplashScreen","EditorPane","EditorPreviewPane","TopBar","Container","Dropzone","SplashScreen","ref","canDisplaySplashScreen","canDisplayLayout","_jsxs","className","children","_jsx","isOpen","_Fragment","split","requestIdleCallback","globalThis","args","callback","start","Date","now","setTimeout","didTimeout","timeoutRemaining","Math","max","cancelIdleCallback","handle","clearTimeout","__WEBPACK_EXTERNAL_MODULE_react__","useEffect","useState","makeUseSplashScreen","getSystem","setCanDisplaySplashScreen","setDisplayLayout","fn","requestId","requestID","timeoutID","LayoutPlugin","rootInjects","components","SwaggerEditorLayout"],"sourceRoot":""}