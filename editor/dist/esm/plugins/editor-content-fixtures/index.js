var n={d:(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},o:(n,e)=>Object.prototype.hasOwnProperty.call(n,e)},e={};n.d(e,{Z:()=>d});const t=()=>"openapi: 3.1.0\ninfo:\n  title: Swagger Petstore - OpenAPI 3.1\n  description: |-\n    This is a sample Pet Store Server based on the OpenAPI 3.1 specification.  You can find out more about\n    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v3\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n  - name: user\n    description: Operations about user\npaths:\n  /pet:\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: Update an existing pet by Id\n      operationId: updatePet\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '422':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid input\n        '422':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: false\n          explode: true\n          schema:\n            type: string\n            default: available\n            enum:\n              - available\n              - pending\n              - sold\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: query\n          description: Name of pet that needs to be updated\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of pet that needs to be updated\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: delete a pet\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          description: ''\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: additionalMetadata\n          in: query\n          description: Additional Metadata\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: Place a new order in the store\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid input\n        '422':\n          description: Validation exception\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of order that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: false\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Update user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent user in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          examples: [10]\n        petId:\n          type: integer\n          format: int64\n          examples: [198772]\n        quantity:\n          type: integer\n          format: int32\n          examples: [7]\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          examples: [approved]\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          examples: [100000]\n        username:\n          type: string\n          examples: [fehguy]\n        address:\n          type: array\n          xml:\n            name: addresses\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Address'\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          examples: [437 Lytton]\n        city:\n          type: string\n          examples: [Palo Alto]\n        state:\n          type: string\n          examples: [CA]\n        zip:\n          type: string\n          examples: ['94301']\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          examples: [1]\n        name:\n          type: string\n          examples: [Dogs]\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          examples: [10]\n        username:\n          type: string\n          examples: [theUser]\n        firstName:\n          type: string\n          examples: [John]\n        lastName:\n          type: string\n          examples: [James]\n        email:\n          type: string\n          examples: [john@email.com]\n        password:\n          type: string\n          examples: ['12345']\n        phone:\n          type: string\n          examples: ['12345']\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          examples: [1]\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          examples: [10]\n        name:\n          type: string\n          examples: [doggie]\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: '##default'\n  requestBodies:\n    Pet:\n      description: Pet object that needs to be added to the store\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n    UserArray:\n      description: List of user object\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://petstore3.swagger.io/oauth/authorize\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n",s=()=>"openapi: 3.0.3\ninfo:\n  title: Swagger Petstore - OpenAPI 3.0\n  description: |-\n    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.11\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v3\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n  - name: user\n    description: Operations about user\npaths:\n  /pet:\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: Update an existing pet by Id\n      operationId: updatePet\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '422':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid input\n        '422':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: false\n          explode: true\n          schema:\n            type: string\n            default: available\n            enum:\n              - available\n              - pending\n              - sold\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: query\n          description: Name of pet that needs to be updated\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of pet that needs to be updated\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: delete a pet\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          description: ''\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: additionalMetadata\n          in: query\n          description: Additional Metadata\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: Place a new order in the store\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid input\n        '422':\n          description: Validation exception\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of order that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: false\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      parameters: []\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Update user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent user in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          xml:\n            name: addresses\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Address'\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: '94301'\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: '12345'\n        phone:\n          type: string\n          example: '12345'\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          example: 1\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: '##default'\n  requestBodies:\n    Pet:\n      description: Pet object that needs to be added to the store\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n    UserArray:\n      description: List of user object\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://petstore3.swagger.io/oauth/authorize\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n",r=()=>'swagger: "2.0"\ninfo:\n  description: "This is a sample server Petstore server.  You can find out more about    \\ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).    \\  For this sample, you can use the api key `special-key` to test the authorization    \\ filters."\n  version: "1.0.0"\n  title: "Swagger Petstore 2.0"\n  termsOfService: "http://swagger.io/terms/"\n  contact:\n    email: "apiteam@swagger.io"\n  license:\n    name: "Apache 2.0"\n    url: "http://www.apache.org/licenses/LICENSE-2.0.html"\nhost: "petstore.swagger.io"\nbasePath: "/v2"\ntags:\n- name: "pet"\n  description: "Everything about your Pets"\n  externalDocs:\n    description: "Find out more"\n    url: "http://swagger.io"\n- name: "store"\n  description: "Access to Petstore orders"\n- name: "user"\n  description: "Operations about user"\n  externalDocs:\n    description: "Find out more about our store"\n    url: "http://swagger.io"\nschemes:\n- "https"\n- "http"\npaths:\n  /pet:\n    post:\n      tags:\n      - "pet"\n      summary: "Add a new pet to the store"\n      description: ""\n      operationId: "addPet"\n      consumes:\n      - "application/json"\n      - "application/xml"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "Pet object that needs to be added to the store"\n        required: true\n        schema:\n          $ref: "#/definitions/Pet"\n      responses:\n        "400":\n          description: Invalid input\n        "422":\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n    put:\n      tags:\n      - "pet"\n      summary: "Update an existing pet"\n      description: ""\n      operationId: "updatePet"\n      consumes:\n      - "application/json"\n      - "application/xml"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "Pet object that needs to be added to the store"\n        required: true\n        schema:\n          $ref: "#/definitions/Pet"\n      responses:\n        "400":\n          description: "Invalid ID supplied"\n        "404":\n          description: "Pet not found"\n        "422":\n          description: "Validation exception"\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n  /pet/findByStatus:\n    get:\n      tags:\n      - "pet"\n      summary: "Finds Pets by status"\n      description: "Multiple status values can be provided with comma separated strings"\n      operationId: "findPetsByStatus"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "status"\n        in: "query"\n        description: "Status values that need to be considered for filter"\n        required: true\n        type: "array"\n        items:\n          type: "string"\n          enum:\n          - "available"\n          - "pending"\n          - "sold"\n          default: "available"\n        collectionFormat: "multi"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            type: "array"\n            items:\n              $ref: "#/definitions/Pet"\n        "400":\n          description: "Invalid status value"\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n  /pet/findByTags:\n    get:\n      tags:\n      - "pet"\n      summary: "Finds Pets by tags"\n      description: "Multiple tags can be provided with comma separated strings. Use        \\ tag1, tag2, tag3 for testing."\n      operationId: "findPetsByTags"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "tags"\n        in: "query"\n        description: "Tags to filter by"\n        required: true\n        type: "array"\n        items:\n          type: "string"\n        collectionFormat: "multi"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            type: "array"\n            items:\n              $ref: "#/definitions/Pet"\n        "400":\n          description: "Invalid tag value"\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n      deprecated: true\n  /pet/{petId}:\n    get:\n      tags:\n      - "pet"\n      summary: "Find pet by ID"\n      description: "Returns a single pet"\n      operationId: "getPetById"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "petId"\n        in: "path"\n        description: "ID of pet to return"\n        required: true\n        type: "integer"\n        format: "int64"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            $ref: "#/definitions/Pet"\n        "400":\n          description: "Invalid ID supplied"\n        "404":\n          description: "Pet not found"\n      security:\n      - api_key: []\n    post:\n      tags:\n      - "pet"\n      summary: "Updates a pet in the store with form data"\n      description: ""\n      operationId: "updatePetWithForm"\n      consumes:\n      - "application/x-www-form-urlencoded"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "petId"\n        in: "path"\n        description: "ID of pet that needs to be updated"\n        required: true\n        type: "integer"\n        format: "int64"\n      - name: "name"\n        in: "formData"\n        description: "Updated name of the pet"\n        required: false\n        type: "string"\n      - name: "status"\n        in: "formData"\n        description: "Updated status of the pet"\n        required: false\n        type: "string"\n      responses:\n        "400":\n          description: Invalid input\n        "422":\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n    delete:\n      tags:\n      - "pet"\n      summary: "Deletes a pet"\n      description: ""\n      operationId: "deletePet"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "api_key"\n        in: "header"\n        required: false\n        type: "string"\n      - name: "petId"\n        in: "path"\n        description: "Pet id to delete"\n        required: true\n        type: "integer"\n        format: "int64"\n      responses:\n        "400":\n          description: "Invalid ID supplied"\n        "404":\n          description: "Pet not found"\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n      - "pet"\n      summary: "uploads an image"\n      description: ""\n      operationId: "uploadFile"\n      consumes:\n      - "multipart/form-data"\n      produces:\n      - "application/json"\n      parameters:\n      - name: "petId"\n        in: "path"\n        description: "ID of pet to update"\n        required: true\n        type: "integer"\n        format: "int64"\n      - name: "additionalMetadata"\n        in: "formData"\n        description: "Additional data to pass to server"\n        required: false\n        type: "string"\n      - name: "file"\n        in: "formData"\n        description: "file to upload"\n        required: false\n        type: "file"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            $ref: "#/definitions/ApiResponse"\n      security:\n      - petstore_auth:\n        - "write:pets"\n        - "read:pets"\n  /store/inventory:\n    get:\n      tags:\n      - "store"\n      summary: "Returns pet inventories by status"\n      description: "Returns a map of status codes to quantities"\n      operationId: "getInventory"\n      produces:\n      - "application/json"\n      parameters: []\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            type: "object"\n            additionalProperties:\n              type: "integer"\n              format: "int32"\n      security:\n      - api_key: []\n  /store/order:\n    post:\n      tags:\n      - "store"\n      summary: "Place an order for a pet"\n      description: ""\n      operationId: "placeOrder"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "order placed for purchasing the pet"\n        required: true\n        schema:\n          $ref: "#/definitions/Order"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            $ref: "#/definitions/Order"\n        "400":\n          description: "Invalid Order"\n  /store/order/{orderId}:\n    get:\n      tags:\n      - "store"\n      summary: "Find purchase order by ID"\n      description: "For valid response try integer IDs with value >= 1 and <= 10.        \\ Other values will generated exceptions"\n      operationId: "getOrderById"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "orderId"\n        in: "path"\n        description: "ID of pet that needs to be fetched"\n        required: true\n        type: "integer"\n        maximum: 10.0\n        minimum: 1.0\n        format: "int64"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            $ref: "#/definitions/Order"\n        "400":\n          description: "Invalid ID supplied"\n        "404":\n          description: "Order not found"\n    delete:\n      tags:\n      - "store"\n      summary: "Delete purchase order by ID"\n      description: "For valid response try integer IDs with positive integer value.        \\ Negative or non-integer values will generate API errors"\n      operationId: "deleteOrder"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "orderId"\n        in: "path"\n        description: "ID of the order that needs to be deleted"\n        required: true\n        type: "integer"\n        minimum: 1.0\n        format: "int64"\n      responses:\n        "400":\n          description: "Invalid ID supplied"\n        "404":\n          description: "Order not found"\n  /user:\n    post:\n      tags:\n      - "user"\n      summary: "Create user"\n      description: "This can only be done by the logged in user."\n      operationId: "createUser"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "Created user object"\n        required: true\n        schema:\n          $ref: "#/definitions/User"\n      responses:\n        default:\n          description: "successful operation"\n  /user/createWithArray:\n    post:\n      tags:\n      - "user"\n      summary: "Creates list of users with given input array"\n      description: ""\n      operationId: "createUsersWithArrayInput"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "List of user object"\n        required: true\n        schema:\n          type: "array"\n          items:\n            $ref: "#/definitions/User"\n      responses:\n        default:\n          description: "successful operation"\n  /user/createWithList:\n    post:\n      tags:\n      - "user"\n      summary: "Creates list of users with given input array"\n      description: ""\n      operationId: "createUsersWithListInput"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - in: "body"\n        name: "body"\n        description: "List of user object"\n        required: true\n        schema:\n          type: "array"\n          items:\n            $ref: "#/definitions/User"\n      responses:\n        default:\n          description: "successful operation"\n  /user/login:\n    get:\n      tags:\n      - "user"\n      summary: "Logs user into the system"\n      description: ""\n      operationId: "loginUser"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "username"\n        in: "query"\n        description: "The user name for login"\n        required: true\n        type: "string"\n      - name: "password"\n        in: "query"\n        description: "The password for login in clear text"\n        required: true\n        type: "string"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            type: "string"\n          headers:\n            X-Rate-Limit:\n              type: "integer"\n              format: "int32"\n              description: "calls per hour allowed by the user"\n            X-Expires-After:\n              type: "string"\n              format: "date-time"\n              description: "date in UTC when token expires"\n        "400":\n          description: "Invalid username/password supplied"\n  /user/logout:\n    get:\n      tags:\n      - "user"\n      summary: "Logs out current logged in user session"\n      description: ""\n      operationId: "logoutUser"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters: []\n      responses:\n        default:\n          description: "successful operation"\n  /user/{username}:\n    get:\n      tags:\n      - "user"\n      summary: "Get user by user name"\n      description: ""\n      operationId: "getUserByName"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "username"\n        in: "path"\n        description: "The name that needs to be fetched. Use user1 for testing. "\n        required: true\n        type: "string"\n      responses:\n        "200":\n          description: "successful operation"\n          schema:\n            $ref: "#/definitions/User"\n        "400":\n          description: "Invalid username supplied"\n        "404":\n          description: "User not found"\n    put:\n      tags:\n      - "user"\n      summary: "Updated user"\n      description: "This can only be done by the logged in user."\n      operationId: "updateUser"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "username"\n        in: "path"\n        description: "name that need to be updated"\n        required: true\n        type: "string"\n      - in: "body"\n        name: "body"\n        description: "Updated user object"\n        required: true\n        schema:\n          $ref: "#/definitions/User"\n      responses:\n        "400":\n          description: "Invalid user supplied"\n        "404":\n          description: "User not found"\n    delete:\n      tags:\n      - "user"\n      summary: "Delete user"\n      description: "This can only be done by the logged in user."\n      operationId: "deleteUser"\n      produces:\n      - "application/xml"\n      - "application/json"\n      parameters:\n      - name: "username"\n        in: "path"\n        description: "The name that needs to be deleted"\n        required: true\n        type: "string"\n      responses:\n        "400":\n          description: "Invalid username supplied"\n        "404":\n          description: "User not found"\nsecurityDefinitions:\n  petstore_auth:\n    type: "oauth2"\n    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"\n    flow: "implicit"\n    scopes:\n      write:pets: "modify pets in your account"\n      read:pets: "read your pets"\n  api_key:\n    type: "apiKey"\n    name: "api_key"\n    in: "header"\ndefinitions:\n  Order:\n    type: "object"\n    properties:\n      id:\n        type: "integer"\n        format: "int64"\n      petId:\n        type: "integer"\n        format: "int64"\n      quantity:\n        type: "integer"\n        format: "int32"\n      shipDate:\n        type: "string"\n        format: "date-time"\n      status:\n        type: "string"\n        description: "Order Status"\n        enum:\n        - "placed"\n        - "approved"\n        - "delivered"\n      complete:\n        type: "boolean"\n        default: false\n    xml:\n      name: "Order"\n  Category:\n    type: "object"\n    properties:\n      id:\n        type: "integer"\n        format: "int64"\n      name:\n        type: "string"\n    xml:\n      name: "Category"\n  User:\n    type: "object"\n    properties:\n      id:\n        type: "integer"\n        format: "int64"\n      username:\n        type: "string"\n      firstName:\n        type: "string"\n      lastName:\n        type: "string"\n      email:\n        type: "string"\n      password:\n        type: "string"\n      phone:\n        type: "string"\n      userStatus:\n        type: "integer"\n        format: "int32"\n        description: "User Status"\n    xml:\n      name: "User"\n  Tag:\n    type: "object"\n    properties:\n      id:\n        type: "integer"\n        format: "int64"\n      name:\n        type: "string"\n    xml:\n      name: "Tag"\n  Pet:\n    type: "object"\n    required:\n    - "name"\n    - "photoUrls"\n    properties:\n      id:\n        type: "integer"\n        format: "int64"\n      category:\n        $ref: "#/definitions/Category"\n      name:\n        type: "string"\n        example: "doggie"\n      photoUrls:\n        type: "array"\n        xml:\n          name: "photoUrl"\n          wrapped: true\n        items:\n          type: "string"\n      tags:\n        type: "array"\n        xml:\n          name: "tag"\n          wrapped: true\n        items:\n          $ref: "#/definitions/Tag"\n      status:\n        type: "string"\n        description: "pet status in the store"\n        enum:\n        - "available"\n        - "pending"\n        - "sold"\n    xml:\n      name: "Pet"\n  ApiResponse:\n    type: "object"\n    properties:\n      code:\n        type: "integer"\n        format: "int32"\n      type:\n        type: "string"\n      message:\n        type: "string"\nexternalDocs:\n  description: "Find out more about Swagger"\n  url: "http://swagger.io"',a=()=>'asyncapi: 2.6.0\ninfo:\n  title: Petstore\n  version: 1.0.0\n  description: The PetStore running in Kafka\nchannels:\n  petstore.order.added:\n    publish:\n      message:\n        title: New order for pet\n        summary: A new order for a pet was added.\n        name: Order\n        contentType: application/json\n        payload:\n          "$ref": "#/components/schemas/Order"\n  petstore.order.deleted:\n    publish:\n      message:\n        name: OrderId\n        contentType: application/json\n        payload:\n          type: integer\n          format: int64\n  petstore.pet.added:\n    publish:\n      message:\n        name: Pet\n        contentType: application/json\n        payload:\n          "$ref": "#/components/schemas/Pet"\n  petstore.pet.changed:\n    publish:\n      message:\n        name: Pet\n        contentType: application/json\n        payload:\n          "$ref": "#/components/schemas/Pet"\n  petstore.pet.deleted:\n    publish:\n      message:\n        name: PetId\n        contentType: application/json\n        payload:\n          type: integer\n          format: int64\ncomponents:\n  schemas:\n    Inventory:\n      type: object\n      additionalProperties:\n        type: integer\n        format: int64\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n          - placed\n          - approved\n          - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          xml:\n            name: addresses\n            wrapped: true\n          items:\n            "$ref": "#/components/schemas/Address"\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: \'94301\'\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: \'12345\'\n        phone:\n          type: string\n          example: \'12345\'\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          example: 1\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n      - name\n      - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          "$ref": "#/components/schemas/Category"\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            "$ref": "#/components/schemas/Tag"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: "##default"\n',i=()=>"asyncapi: 3.0.0\ninfo:\n  title: Petstore\n  version: 1.0.0\n  description: The PetStore running in Kafka\nchannels:\n  petstore.order.added:\n    address: petstore.order.added\n    messages:\n      publish.message:\n        title: New order for pet\n        summary: A new order for a pet was added.\n        name: Order\n        contentType: application/json\n        payload:\n          $ref: '#/components/schemas/Order'\n  petstore.order.deleted:\n    address: petstore.order.deleted\n    messages:\n      publish.message:\n        name: OrderId\n        contentType: application/json\n        payload:\n          type: integer\n          format: int64\n  petstore.pet.added:\n    address: petstore.pet.added\n    messages:\n      publish.message:\n        name: Pet\n        contentType: application/json\n        payload:\n          $ref: '#/components/schemas/Pet'\n  petstore.pet.changed:\n    address: petstore.pet.changed\n    messages:\n      publish.message:\n        name: Pet\n        contentType: application/json\n        payload:\n          $ref: '#/components/schemas/Pet'\n  petstore.pet.deleted:\n    address: petstore.pet.deleted\n    messages:\n      publish.message:\n        name: PetId\n        contentType: application/json\n        payload:\n          type: integer\n          format: int64\noperations:\n  petstore.order.added.publish:\n    action: receive\n    channel:\n      $ref: '#/channels/petstore.order.added'\n    messages:\n      - $ref: '#/channels/petstore.order.added/messages/publish.message'\n  petstore.order.deleted.publish:\n    action: receive\n    channel:\n      $ref: '#/channels/petstore.order.deleted'\n    messages:\n      - $ref: '#/channels/petstore.order.deleted/messages/publish.message'\n  petstore.pet.added.publish:\n    action: receive\n    channel:\n      $ref: '#/channels/petstore.pet.added'\n    messages:\n      - $ref: '#/channels/petstore.pet.added/messages/publish.message'\n  petstore.pet.changed.publish:\n    action: receive\n    channel:\n      $ref: '#/channels/petstore.pet.changed'\n    messages:\n      - $ref: '#/channels/petstore.pet.changed/messages/publish.message'\n  petstore.pet.deleted.publish:\n    action: receive\n    channel:\n      $ref: '#/channels/petstore.pet.deleted'\n    messages:\n      - $ref: '#/channels/petstore.pet.deleted/messages/publish.message'\ncomponents:\n  schemas:\n    Inventory:\n      type: object\n      additionalProperties:\n        type: integer\n        format: int64\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n    Customer:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          xml:\n            name: addresses\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Address'\n      xml:\n        name: customer\n    Address:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: '94301'\n      xml:\n        name: address\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      xml:\n        name: category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: '12345'\n        phone:\n          type: string\n          example: '12345'\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          example: 1\n      xml:\n        name: user\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: tag\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n      xml:\n        name: '##default'\n",o=()=>"asyncapi: '2.6.0'\ninfo:\n  title: Streetlights Kafka API\n  version: '1.0.0'\n  description: |\n    The Smartylighting Streetlights API allows you to remotely manage the city lights.\n\n    ### Check out its awesome features:\n\n    * Turn a specific streetlight on/off \ud83c\udf03\n    * Dim a specific streetlight \ud83d\ude0e\n    * Receive real-time information about environmental lighting conditions \ud83d\udcc8\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n\nservers:\n  scram-connections:\n    url: test.mykafkacluster.org:18092\n    protocol: kafka-secure\n    description: Test broker secured with scramSha256\n    security:\n      - saslScram: []\n    tags:\n      - name: \"env:test-scram\"\n        description: \"This environment is meant for running internal tests through scramSha256\"\n      - name: \"kind:remote\"\n        description: \"This server is a remote server. Not exposed by the application\"\n      - name: \"visibility:private\"\n        description: \"This resource is private and only available to certain users\"\n  mtls-connections:\n    url: test.mykafkacluster.org:28092\n    protocol: kafka-secure\n    description: Test broker secured with X509\n    security:\n      - certs: []\n    tags:\n      - name: \"env:test-mtls\"\n        description: \"This environment is meant for running internal tests through mtls\"\n      - name: \"kind:remote\"\n        description: \"This server is a remote server. Not exposed by the application\"\n      - name: \"visibility:private\"\n        description: \"This resource is private and only available to certain users\"\n\ndefaultContentType: application/json\n\nchannels:\n  smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured:\n    description: The topic on which measured values may be produced and consumed.\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n    publish:\n      summary: Inform about environmental lighting conditions of a particular streetlight.\n      operationId: receiveLightMeasurement\n      traits:\n        - $ref: '#/components/operationTraits/kafka'\n      message:\n        $ref: '#/components/messages/lightMeasured'\n\n  smartylighting.streetlights.1.0.action.{streetlightId}.turn.on:\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n    subscribe:\n      operationId: turnOn\n      traits:\n        - $ref: '#/components/operationTraits/kafka'\n      message:\n        $ref: '#/components/messages/turnOnOff'\n\n  smartylighting.streetlights.1.0.action.{streetlightId}.turn.off:\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n    subscribe:\n      operationId: turnOff\n      traits:\n        - $ref: '#/components/operationTraits/kafka'\n      message:\n        $ref: '#/components/messages/turnOnOff'\n\n  smartylighting.streetlights.1.0.action.{streetlightId}.dim:\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n    subscribe:\n      operationId: dimLight\n      traits:\n        - $ref: '#/components/operationTraits/kafka'\n      message:\n        $ref: '#/components/messages/dimLight'\n\ncomponents:\n  messages:\n    lightMeasured:\n      name: lightMeasured\n      title: Light measured\n      summary: Inform about environmental lighting conditions of a particular streetlight.\n      contentType: application/json\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: \"#/components/schemas/lightMeasuredPayload\"\n    turnOnOff:\n      name: turnOnOff\n      title: Turn on/off\n      summary: Command a particular streetlight to turn the lights on or off.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: \"#/components/schemas/turnOnOffPayload\"\n    dimLight:\n      name: dimLight\n      title: Dim light\n      summary: Command a particular streetlight to dim the lights.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: \"#/components/schemas/dimLightPayload\"\n\n  schemas:\n    lightMeasuredPayload:\n      type: object\n      properties:\n        lumens:\n          type: integer\n          minimum: 0\n          description: Light intensity measured in lumens.\n        sentAt:\n          $ref: \"#/components/schemas/sentAt\"\n    turnOnOffPayload:\n      type: object\n      properties:\n        command:\n          type: string\n          enum:\n            - on\n            - off\n          description: Whether to turn on or off the light.\n        sentAt:\n          $ref: \"#/components/schemas/sentAt\"\n    dimLightPayload:\n      type: object\n      properties:\n        percentage:\n          type: integer\n          description: Percentage to which the light should be dimmed to.\n          minimum: 0\n          maximum: 100\n        sentAt:\n          $ref: \"#/components/schemas/sentAt\"\n    sentAt:\n      type: string\n      format: date-time\n      description: Date and time when the message was sent.\n\n  securitySchemes:\n    saslScram:\n      type: scramSha256\n      description: Provide your username and password for SASL/SCRAM authentication\n    certs:\n      type: X509\n      description: Download the certificate files from service provider\n\n  parameters:\n    streetlightId:\n      description: The ID of the streetlight.\n      schema:\n        type: string\n\n  messageTraits:\n    commonHeaders:\n      headers:\n        type: object\n        properties:\n          my-app-header:\n            type: integer\n            minimum: 0\n            maximum: 100\n\n  operationTraits:\n    kafka:\n      bindings:\n        kafka:\n          clientId:\n            type: string\n            enum: ['my-app-id']\n",p=()=>"asyncapi: 3.0.0\ninfo:\n  title: Streetlights Kafka API\n  version: 1.0.0\n  description: \"The Smartylighting Streetlights API allows you to remotely manage the city lights.\\n\\n### Check out its awesome features:\\n\\n* Turn a specific streetlight on/off \\U0001F303\\n* Dim a specific streetlight \\U0001F60E\\n* Receive real-time information about environmental lighting conditions \\U0001F4C8\\n\"\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\ndefaultContentType: application/json\nservers:\n  scram-connections:\n    host: 'test.mykafkacluster.org:18092'\n    protocol: kafka-secure\n    description: Test broker secured with scramSha256\n    security:\n      - $ref: '#/components/securitySchemes/saslScram'\n    tags:\n      - name: 'env:test-scram'\n        description: >-\n          This environment is meant for running internal tests through\n          scramSha256\n      - name: 'kind:remote'\n        description: This server is a remote server. Not exposed by the application\n      - name: 'visibility:private'\n        description: This resource is private and only available to certain users\n  mtls-connections:\n    host: 'test.mykafkacluster.org:28092'\n    protocol: kafka-secure\n    description: Test broker secured with X509\n    security:\n      - $ref: '#/components/securitySchemes/certs'\n    tags:\n      - name: 'env:test-mtls'\n        description: This environment is meant for running internal tests through mtls\n      - name: 'kind:remote'\n        description: This server is a remote server. Not exposed by the application\n      - name: 'visibility:private'\n        description: This resource is private and only available to certain users\nchannels:\n  lightingMeasured:\n    address: 'smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured'\n    messages:\n      lightMeasured:\n        $ref: '#/components/messages/lightMeasured'\n    description: The topic on which measured values may be produced and consumed.\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightTurnOn:\n    address: 'smartylighting.streetlights.1.0.action.{streetlightId}.turn.on'\n    messages:\n      turnOn:\n        $ref: '#/components/messages/turnOnOff'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightTurnOff:\n    address: 'smartylighting.streetlights.1.0.action.{streetlightId}.turn.off'\n    messages:\n      turnOff:\n        $ref: '#/components/messages/turnOnOff'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\n  lightsDim:\n    address: 'smartylighting.streetlights.1.0.action.{streetlightId}.dim'\n    messages:\n      dimLight:\n        $ref: '#/components/messages/dimLight'\n    parameters:\n      streetlightId:\n        $ref: '#/components/parameters/streetlightId'\noperations:\n  receiveLightMeasurement:\n    action: receive\n    channel:\n      $ref: '#/channels/lightingMeasured'\n    summary: >-\n      Inform about environmental lighting conditions of a particular\n      streetlight.\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightingMeasured/messages/lightMeasured'\n  turnOn:\n    action: send\n    channel:\n      $ref: '#/channels/lightTurnOn'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightTurnOn/messages/turnOn'\n  turnOff:\n    action: send\n    channel:\n      $ref: '#/channels/lightTurnOff'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightTurnOff/messages/turnOff'\n  dimLight:\n    action: send\n    channel:\n      $ref: '#/channels/lightsDim'\n    traits:\n      - $ref: '#/components/operationTraits/kafka'\n    messages:\n      - $ref: '#/channels/lightsDim/messages/dimLight'\ncomponents:\n  messages:\n    lightMeasured:\n      name: lightMeasured\n      title: Light measured\n      summary: >-\n        Inform about environmental lighting conditions of a particular\n        streetlight.\n      contentType: application/json\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/lightMeasuredPayload'\n    turnOnOff:\n      name: turnOnOff\n      title: Turn on/off\n      summary: Command a particular streetlight to turn the lights on or off.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/turnOnOffPayload'\n    dimLight:\n      name: dimLight\n      title: Dim light\n      summary: Command a particular streetlight to dim the lights.\n      traits:\n        - $ref: '#/components/messageTraits/commonHeaders'\n      payload:\n        $ref: '#/components/schemas/dimLightPayload'\n  schemas:\n    lightMeasuredPayload:\n      type: object\n      properties:\n        lumens:\n          type: integer\n          minimum: 0\n          description: Light intensity measured in lumens.\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    turnOnOffPayload:\n      type: object\n      properties:\n        command:\n          type: string\n          enum:\n            - 'on'\n            - 'off'\n          description: Whether to turn on or off the light.\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    dimLightPayload:\n      type: object\n      properties:\n        percentage:\n          type: integer\n          description: Percentage to which the light should be dimmed to.\n          minimum: 0\n          maximum: 100\n        sentAt:\n          $ref: '#/components/schemas/sentAt'\n    sentAt:\n      type: string\n      format: date-time\n      description: Date and time when the message was sent.\n  securitySchemes:\n    saslScram:\n      type: scramSha256\n      description: Provide your username and password for SASL/SCRAM authentication\n    certs:\n      type: X509\n      description: Download the certificate files from service provider\n  parameters:\n    streetlightId:\n      description: The ID of the streetlight.\n  messageTraits:\n    commonHeaders:\n      headers:\n        type: object\n        properties:\n          my-app-header:\n            type: integer\n            minimum: 0\n            maximum: 100\n  operationTraits:\n    kafka:\n      bindings:\n        kafka:\n          clientId:\n            type: string\n            enum:\n              - my-app-id\n",m=()=>"version: '2021-05-07'\ninfo:\n  title: SmartBear API Guidelines\n  description: |\n    A machine and human readable version of the SmartBear API Style Guide aimed at promoting living API Style Governance across various tools and teams, leading to improved API quality.\n    See the [SmartBear Standards and Guidelines](https://github.com/SmartBear/api-standards-and-guidelines) repo for a traditional view of the static guidelines.\nprinciples:\n- iri: urn:apidesign.systems:principle:robustness\n  level: must\n- iri: urn:apidesign.systems:principle:rmm:level2\n  level: must\n- iri: urn:apidesign.systems:principle:rmm:level3\n  level: should\nstandards:\n- iri: urn:ietf:rfc:6648\n  level: must\n- iri: urn:ietf:rfc:7807\n  level: must\n- iri: urn:ietf:rfc:7231\n  level: should\n- iri: urn:ietf:rfc:6585\n  level: may\n- iri: urn:ietf:rfc:5788\n  level: may\n- iri: urn:ietf:draft:http-semantics\n  level: may\nscenarios:\n- description: SB-API-010 - Only apply standard HTTP methods\n  when:\n  - http\n  - transaction\n  then:\n  - subject:\n    - http\n    - request\n    - method\n    level: may\n    values:\n    - get\n    - post\n    - put\n    - patch\n    - delete\n  - subject:\n    - http\n    - request\n    - header\n    level: may\n    values:\n    - Accept\n    - Accept-Charset\n    - Authorization\n    - Content-Language\n    - Content-Type\n    - Link\n    - Prefer\n  - subject:\n    - http\n    - request\n    - header\n    - Content-Type\n    level: may\n    values:\n    - application/json\n    - application/hal+json\n  - subject:\n    - http\n    - response\n    - header\n    - Content-Type\n    level: should\n    values:\n    - application/hal+json\n  - subject:\n    - http\n    - response\n    - header\n    - Content-Type\n    level: may\n    values:\n    - application/json\n    - application/hal+json\n    - application/problem+json\n- description: GET Methods - Allowed status codes\n  when:\n  - http\n  - request\n  - method\n  - get\n  then:\n  - subject:\n    - http\n    - response\n    - status_code\n    level: may\n    values:\n    - '200'\n    - '304'\n    - '400'\n    - '401'\n    - '403'\n    - '404'\n    - '405'\n    - '422'\n    - '429'\n    - '500'\n    - '501'\n    - '503'\n- description: POST Method - Allowed status codes\n  when:\n  - http\n  - request\n  - method\n  - post\n  then:\n  - subject:\n    - http\n    - response\n    - status_code\n    level: may\n    values:\n    - '200'\n    - '201'\n    - '202'\n    - '400'\n    - '401'\n    - '403'\n    - '404'\n    - '405'\n    - '409'\n    - '415'\n    - '422'\n    - '429'\n    - '500'\n    - '501'\n    - '503'\n- description: PUT Method - Allowed status codes\n  when:\n  - http\n  - request\n  - method\n  - put\n  then:\n  - subject:\n    - http\n    - response\n    - status_code\n    level: may\n    values:\n    - '200'\n    - '201'\n    - '202'\n    - '204'\n    - '400'\n    - '401'\n    - '403'\n    - '404'\n    - '405'\n    - '409'\n    - '412'\n    - '415'\n    - '422'\n    - '429'\n    - '500'\n    - '501'\n    - '503'\n- description: PATCH Method - Allowed status codes\n  when:\n  - http\n  - request\n  - method\n  - patch\n  then:\n  - subject:\n    - http\n    - response\n    - status_code\n    level: may\n    values:\n    - '200'\n    - '202'\n    - '204'\n    - '400'\n    - '401'\n    - '403'\n    - '404'\n    - '405'\n    - '409'\n    - '412'\n    - '415'\n    - '422'\n    - '429'\n    - '500'\n    - '501'\n    - '503'\n- description: DELETE Method - Allowed status codes\n  when:\n  - http\n  - request\n  - method\n  - delete\n  then:\n  - subject:\n    - http\n    - response\n    - status_code\n    level: may\n    values:\n    - '200'\n    - '202'\n    - '204'\n    - '400'\n    - '401'\n    - '403'\n    - '404'\n    - '405'\n    - '409'\n    - '412'\n    - '415'\n    - '422'\n    - '429'\n    - '500'\n    - '501'\n    - '503'\n- description: Client Errors must return `application/problem+json`\n  when:\n  - http\n  - response\n  - status_code\n  - client_error\n  then:\n  - subject:\n    - http\n    - response\n    - header\n    - Content-Type\n    level: must\n    values:\n    - application/problem+json\n- description: Server Errors must return `application/problem+json`\n  when:\n  - http\n  - response\n  - status_code\n  - server_error\n  then:\n  - subject:\n    - http\n    - response\n    - header\n    - Content-Type\n    level: must\n    values:\n    - application/problem+json\n",d=()=>({statePlugins:{editorContentFixtures:{selectors:{selectOpenAPI310PetstoreYAML:t,selectOpenAPI303PetstoreYAML:s,selectOpenAPI20PetstoreYAML:r,selectAsyncAPI260PetstoreYAML:a,selectAsyncAPI300PetstoreYAML:i,selectAsyncAPI260StreetlightsYAML:o,selectAsyncAPI300StreetlightsYAML:p,selectAPIDesignSystemsYAML:m}}}});var c=e.Z;export{c as default};
//# sourceMappingURL=index.js.map