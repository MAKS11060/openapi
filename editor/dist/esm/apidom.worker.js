import*as e from"monaco-editor/esm/vs/editor/editor.worker.js";import*as t from"deep-extend";import*as o from"vscode-languageserver-textdocument";import*as n from"@swagger-api/apidom-ls";var r={d:(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},i={};r.d(i,{M$:()=>g,Ue:()=>l,j2:()=>a.initialize,Yw:()=>d});const a=(e=>{var t={};return r.d(t,e),t})({initialize:()=>e.initialize});const s=(e=>{var t={};return r.d(t,e),t})({default:()=>t.default});const c=o;const u=n;class g{constructor(e,t){this._ctx=e,this._createData=t,this._languageService=this.createLanguageService()}createLanguageService(){return u.getLanguageService((0,s.default)({},this.constructor.defaultApiDOMContext,this._createData.apiDOMContext))}async doValidation(e){const t=this._getTextDocument(e);return t?this._languageService.doValidation(t):[]}async doComplete(e,t){const o=this._getTextDocument(e);return o?this._languageService.doCompletion(o,t):[]}async doHover(e,t){const o=this._getTextDocument(e);return o?this._languageService.doHover(o,t):[]}async doLinks(e){const t=this._getTextDocument(e);return t?this._languageService.doLinks(t):[]}async findDocumentSymbols(e){const t=this._getTextDocument(e);return t?this._languageService.doFindDocumentSymbols(t):[]}async provideDefinition(e,t){const o=this._getTextDocument(e);return o?this._languageService.doProvideDefinition(o,{uri:e,position:t}):[]}async doCodeActions(e,t){const o=this._getTextDocument(e);return o?this._languageService.doCodeActions(o,t):[]}async findSemanticTokens(e){const t=this._getTextDocument(e);return t?this._languageService.computeSemanticTokens(t):[]}async getSemanticTokensLegend(){return this._languageService.getSemanticTokensLegend()}async doDeref(e,t={}){const o=this._getTextDocument(e);return o?this._languageService.doDeref(o,t):[]}async getJsonPointerPosition(e,t){const o=this._getTextDocument(e);return o?this._languageService.getJsonPointerPosition(o,t):[]}_getTextDocument(e){const t=this._ctx.getMirrorModels().find((t=>t.uri.toString()===e));return t?c.TextDocument.create(e,this._createData.languageId,t.version,t.getValue()):null}}g.defaultApiDOMContext={validatorProviders:[],completionProviders:[],performanceLogs:!1,logLevel:u.LogLevel.WARN,defaultLanguageContent:{namespace:"asyncapi"},completionContext:{maxNumberOfItems:100,enableLSPFilter:!1},validationContext:{referenceValidationMode:u.ReferenceValidationMode.APIDOM_INDIRECT_EXTERNAL}};const d=e=>(t,o)=>{let n=e;if(o.customWorkerPath)if("undefined"===typeof globalThis.importScripts)console.warn("Monaco is not using webworkers for background tasks, and that is needed to support the customWorkerPath flag");else{Array.isArray(o.customWorkerPath)?globalThis.importScripts(...o.customWorkerPath):globalThis.importScripts(o.customWorkerPath);const{customApiDOMWorkerFactory:e}=globalThis;if("function"!==typeof e)throw new Error(`The script at ${o.customWorkerPath} does not add customApiDOMWorkerFactory to globalThis`);n=e(n,{apidomLS:u,vscodeLanguageServerTextDocument:c,deepExtend:s.default})}return new n(t,o)},l=d(g);globalThis.onmessage=()=>{(0,a.initialize)(((e,t)=>l(e,t)))};var m=i.M$,h=i.Ue,p=i.j2,v=i.Yw;export{m as ApiDOMWorker,h as create,p as initialize,v as makeCreate};
//# sourceMappingURL=apidom.worker.js.map