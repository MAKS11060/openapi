openapi: 3.1.0
info:
  version: 0.0.1
  title: Shikimori API
externalDocs:
  url: 'https://shikimori.one/api/doc'
  description: Official Shikimori API
servers:
  - url: 'https://shikimori.one'
    description: Main server
components:
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://shikimori.one/oauth/authorize'
          tokenUrl: 'https://shikimori.one/oauth/token'
          refreshUrl: 'https://shikimori.one/oauth/token'
          scopes:
            - user_rates
            - email
            - messages
            - comments
            - topics
            - content
            - clubs
            - friends
            - ignores
  examples:
    UserID:
      description: User ID
      value: 406192
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
          exclusiveMinimum: 0
          example: 406192
        nickname:
          type: string
        avatar:
          type: string
        image:
          type: object
          properties:
            x160: &ref_0
              type: string
            x148: *ref_0
            x80: *ref_0
            x64: *ref_0
            x48: *ref_0
            x32: *ref_0
            x16: *ref_0
        last_online_at:
          type: string
          format: date-time
        url:
          type: string
      required:
        - id
        - nickname
        - avatar
        - image
        - last_online_at
        - url
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UsersQuery:
      type: object
      properties:
        page:
          type: number
          minimum: 1
          maximum: 100000
        limit:
          type: number
          minimum: 1
          maximum: 100
        search:
          type: string
    UserId:
      type: number
      exclusiveMinimum: 0
      default: 406192
      example: 406192
    UserInfo:
      type: object
      properties:
        id:
          type: number
          exclusiveMinimum: 0
          example: 406192
        nickname:
          type: string
        avatar:
          type: string
        image:
          type: object
          properties:
            x160: &ref_1
              type: string
            x148: *ref_1
            x80: *ref_1
            x64: *ref_1
            x48: *ref_1
            x32: *ref_1
            x16: *ref_1
        last_online_at:
          type: string
          format: date-time
        url:
          type: string
        name:
          type:
            - string
            - 'null'
        sex:
          type:
            - string
            - 'null'
        full_years:
          type:
            - number
            - 'null'
        last_online:
          type:
            - string
            - 'null'
        website:
          type:
            - string
            - 'null'
      required:
        - id
        - nickname
        - avatar
        - image
        - last_online_at
        - url
        - name
        - sex
        - full_years
        - last_online
        - website
  parameters:
    UsersQuery:
      schema:
        $ref: '#/components/schemas/UsersQuery'
      required: true
      in: query
      name: UsersQuery
    UserId:
      schema:
        $ref: '#/components/schemas/UserId'
      required: true
      in: path
      name: id
paths:
  /api/users:
    get:
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UsersQuery'
      responses:
        '200':
          description: List users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
  '/api/users/{id}':
    get:
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Show an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
webhooks: {}
