openapi: 3.1.0
info:
  title: Shikimori API
  version: 0.0.1

externalDocs:
  description: Official Shikimori API
  url: https://shikimori.one/api/doc

servers:
  - url: https://shikimori.{TLD}
    variables:
      TLD:
        default: 'one'
        enum: ['one', 'me']

tags:
  - name: users
    description: v1
  - name: user_rates_v2
    description: v2
  - name: user_rates
    description: v1
  - name: graphql
    description: GraphQL API
    externalDocs:
      url: https://shikimori.one/api/doc/graphql

paths:
  # api/graphql
  /api/graphql:
    post:
      summary: GraphQL Endpoint
      description: Endpoint for GraphQL queries.
      tags:
        - graphql
      requestBody:
        description: GraphQLQuery
        content:
          'application/json':
            schema:
              type: object
              properties:
                query:
                  type: string
                  default: '{animes(search: "bakemono", limit: 1, kind: "!special") {id name}}'
                variables:
                  type: object
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: The result of the GraphQL query.
              examples:
                GraphQLQueryExample:
                  summary: Example of a GraphQL query response
                  value:
                    data:
                      animes:
                        - id: 6948
                          name: 'Bakemonogatari Recap'

  /api/doc/graphql:
    get:
      summary: GraphQL Playground
      description: Interactive GraphQL Playground for testing queries.
      tags:
        - graphql
      responses:
        '200':
          description: Successful response
          content:
            text/html:
              schema:
                type: string
                format: binary
              examples:
                GraphQLPlaygroundExample:
                  summary: Example of the GraphQL Playground HTML response
                  value: '<html>...</html>'

# api/v1

  /api/users:
    description: List users
    get:
      tags:
        - users
      responses:
        200:
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/users'

  /api/users/{id}:
    description: Show an user
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      tags:
        - users
      200:
        description: Success
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/user'

  /api/users/{id}/info:
    get:
      summary: Show user's brief info
      description: Retrieves brief information about a user.
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                UserInfoExample:
                  $ref: '#/components/examples/UserInfoExample'
              schema:
                $ref: '#/components/schemas/UserInfo'

  /api/users/whoami:
    description: Show current user's brief info
    get:
      tags:
        - users
      security:
        - oauth2: []
      responses:
        200:
          $ref: '#/components/responses/UserResponse'

  /api/users/sign_out:
    description: Sign out the user
    post:
      tags:
        - users
      security:
        - oauth2: []
      deprecated: false

  /api/user_rates:
    description: Create an user rate
    post:
      tags:
        - user_rates
      deprecated: true

  /api/user_rates/{id}:
    description: 'User Rates'
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      tags:
        - user_rates
      description: Show an user rate
      deprecated: true
    put:
      tags:
        - user_rates
      description: Update an user rate
      deprecated: true
    patch:
      tags:
        - user_rates
      description: Update an user rate
      deprecated: true
    delete:
      tags:
        - user_rates
      description: Destroy an user rate
      deprecated: true

  /api/user_rates/{id}/increment:
    description: Increment episodes/chapters by 1
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      tags:
        - user_rates
      deprecated: true

  /api/user_rates/{type}/cleanup:
    description: Delete entire user rates and history
    parameters:
      - $ref: '#/components/parameters/type'
    delete:
      tags:
        - user_rates
      responses:
        200:
          $ref: '#/components/responses/UserRatesResponse'

  /api/user_rates/{type}/reset:
    description: Reset all user scores to 0
    parameters:
      - $ref: '#/components/parameters/type'
    delete:
      tags:
        - user_rates
      responses:
        200:
          $ref: '#/components/responses/UserRatesResponse'

# api/v2
  /api/v2/user_rates:
    get:
      summary: List user rates
      description: Retrieves a list of user rates
      tags:
        - user_rates_v2
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
          description: 'Validations: Must be a number'
        - name: target_id
          in: query
          required: false
          schema:
            type: integer
          description: 'Validations: Must be a number'
        - name: target_type
          in: query
          required: false
          schema:
            type: string
            enum: [Anime, Manga]
          description: 'Validations: Must be one of: Anime, Manga'
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [planned, watching, rewatching, completed, on_hold, dropped]
          description: |
            Validations:
            - Must be one of: planned, watching, rewatching, completed, on_hold, dropped.
            - planned – Planned to Watch
            - watching – Watching
            - rewatching – Rewatching
            - completed – Completed
            - on_hold – On Hold
            - dropped – Dropped
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100000
          description: 'This field is ignored when user_id is set. Validations: Must be a number between 1 and 100000'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            maximum: 1000
          description: '1000 maximum. This field is ignored when user_id is set. Validations: Must be a number'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRate'
              examples:
                UserRatesExample:
                  $ref: '#/components/examples/UserRatesExample'

components:
  securitySchemes:
    oauth2:
      description: 'Requirements: Add your Oauth2 Application name to User-Agent requests header'
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://shikimori.one/oauth/authorize
          tokenUrl: https://shikimori.one/oauth/token
          refreshUrl: https://shikimori.one/oauth/token
          scopes:
            user_rates: Change your anime and manga list
            email: Receive your postal address (email)
            messages: Read your private messages, send private messages on your behalf
            comments: Comment on your behalf
            topics: Create topics and reviews on your behalf
            content: Modify the site database
            clubs: Joining and leaving clubs
            friends: Add and remove people as friends
            ignores: Add and remove people to ignore list

  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        default: 406192
      description: The ID of the user

    id:
      name: id
      in: path
      required: true
      description: The ID in 'path'
      schema:
        type: integer
        minimum: 1

    type:
      name: id
      in: path
      required: true
      description: The ID of the post to retrieve
      schema:
        $ref: '#/components/schemas/type'

  schemas:
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 23456815
        nickname:
          type: string
        avatar:
          type: string
        image:
          type: object
          properties:
            x160:
              type: string
            x148:
              type: string
            x80:
              type: string
            x64:
              type: string
            x48:
              type: string
            x32:
              type: string
            x16:
              type: string
        last_online_at:
          type: string
          format: date-time
        url:
          type: string
        name:
          type: string
          nullable: true
        sex:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        birth_on:
          type: string
          nullable: true
        full_years:
          type: integer
          nullable: true
        locale:
          type: string

    UserRate:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        target_id:
          type: integer
        target_type:
          type: string
          enum: [Anime, Manga]
        score:
          type: integer
        status:
          type: string
          enum: [planned, watching, rewatching, completed, on_hold, dropped]
        rewatches:
          type: integer
        episodes:
          type: integer
        volumes:
          type: integer
        chapters:
          type: integer
        text:
          type: string
          nullable: true
        text_html:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    user:
      type: object
      properties:
        id:
          type: number
          minimum: 1
        nickname:
          type: string
        avatar:
          type: string
        image:
          type: object
          properties:
            x160:
              type: string
            x148:
              type: string
            x80:
              type: string
            x64:
              type: string
            x48:
              type: string
            x32:
              type: string
            x16:
              type: string
          required:
            - x160
            - x148
            - x80
            - x64
            - x48
            - x32
            - x16
        last_online_at:
          type: string
        url:
          type: string
      required:
        - id
        - nickname
        - avatar
        - image
        - last_online_at
        - url

    users:
      type: array
      items:
        $ref: '#/components/schemas/user'

    type:
      type: string
      default: anime
      enum:
        - anime
        - manga

  responses:
    UserResponse:
      description: 'Success'
      content:
        'application/json':
          examples:
            UserInfoExample:
              $ref: '#/components/examples/UserInfoExample'
            NullExample:
              $ref: '#/components/examples/NullExample'
          schema:
            oneOf:
              - $ref: '#/components/schemas/UserInfo'
              - type: 'null'

    UserRatesResponse:
      description: 'Success'
      content:
        'application/json':
          schema:
            type: object
            properties:
              notice:
                type: string

  examples:
    NullExample:
      summary: Example of null response
      value: null

    UserInfoExample:
      summary: Example of user info
      value:
        id: 2222
        nickname: 'Test'
        avatar: '/assets/globals/missing_avatar/x48.png'
        image:
          x160: '/assets/globals/missing_avatar/x160.png'
          x148: '/assets/globals/missing_avatar/x148.png'
          x80: '/assets/globals/missing_avatar/x80.png'
          x64: '/assets/globals/missing_avatar/x64.png'
          x48: '/assets/globals/missing_avatar/x48.png'
          x32: '/assets/globals/missing_avatar/x32.png'
          x16: '/assets/globals/missing_avatar/x16.png'
        last_online_at: '2022-11-26T17:19:31.424+03:00'
        url: 'https://example.com/'
        name: null
        sex: null
        website: null
        birth_on: null
        full_years: null
        locale: 'ru'

    UserRatesExample:
      summary: Example of user rates
      value:
        - id: 13
          user_id: 23456789
          target_id: 12
          target_type: "Anime"
          score: 0
          status: "completed"
          rewatches: 0
          episodes: 0
          volumes: 0
          chapters: 0
          text: null
          text_html: ""
          created_at: "2022-11-26T17:19:28.708+03:00"
          updated_at: "2022-11-26T17:19:28.708+03:00"
        - id: 14
          user_id: 23456789
          target_id: 13
          target_type: "Anime"
          score: 0
          status: "planned"
          rewatches: 0
          episodes: 0
          volumes: 0
          chapters: 0
          text: null
          text_html: ""
          created_at: "2022-11-26T17:19:28.708+03:00"
          updated_at: "2022-11-26T17:19:28.708+03:00"
