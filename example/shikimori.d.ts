/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Users"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The user ID */
                    id: components["schemas"]["UserID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Show an user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserInfo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Show an user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List genres */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: number;
                            name: string;
                            russian: string | null;
                            /** @enum {string} */
                            kind: "anime" | "manga";
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/user_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    /** @description The user ID */
                    user_id?: components["schemas"]["UserID"];
                    target_id?: number;
                    target_type?: "Anime" | "Mange";
                    status?: "planned" | "watching" | "rewatching" | "completed" | "on_hold" | "dropped";
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List user rates */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRates"][];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    /** @description The page number, must be a number between 1 and 100000 */
                    page?: number;
                    /** @description The limit of results per page, must be a number and maximum 50 */
                    limit?: number;
                    /** @description The order of the results */
                    order?: "id" | "id_desc" | "ranked" | "kind" | "popularity" | "name" | "aired_on" | "episodes" | "status" | "random" | "created_at" | "created_at_desc";
                    /** @description The kind of the anime */
                    kind?: "tv" | "movie" | "ova" | "ona" | "special" | "tv_special" | "music" | "pv" | "cm" | "tv_13" | "tv_24" | "tv_48";
                    /** @description The status of the anime */
                    status?: "anons" | "ongoing" | "released";
                    /** @description The season of the anime, e.g., summer_2017, 2016, 2014_2016, 199x */
                    season?: string;
                    /** @description The minimal anime score, must be a number */
                    score?: number;
                    /** @description The duration of the anime */
                    duration?: "S" | "D" | "F";
                    /** @description The rating of the anime */
                    rating?: "none" | "g" | "pg" | "pg_13" | "r" | "r_plus" | "rx";
                    /** @description List of genre ids separated by comma */
                    genre?: string;
                    /** @description List of genre v2 ids separated by comma */
                    genre_v2?: string;
                    /** @description List of studio ids separated by comma */
                    studio?: string;
                    /** @description List of franchises separated by comma */
                    franchise?: string;
                    /** @description Set to false to allow hentai, yaoi and yuri */
                    censored?: "true" | "false";
                    /** @description Status of anime in current user list */
                    mylist?: "planned" | "watching" | "rewatching" | "completed" | "on_hold" | "dropped";
                    /** @description List of anime ids separated by comma */
                    ids?: string;
                    /** @description List of anime ids separated by comma */
                    exclude_ids?: string;
                    /** @description Search phrase to filter animes by name */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List animes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnimeList"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/animes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the anime */
                    id: components["schemas"]["AnimeID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Show an anime */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Anime"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The given parameters could not be parsed */
        BadRequest: unknown;
        /** @description Authentication failed */
        Unauthorized: {
            /** @example invalid_token */
            error: string;
            /** @example The access token is invalid */
            error_description: string;
            /** @example unauthorized */
            state: string;
        };
        /** @description Access denied */
        Forbidden: unknown;
        /** @description Not found */
        NotFound: {
            message: string;
            /** @example 404 */
            code: number;
        };
        /**
         * @description The user ID
         * @default 406192
         */
        UserID: number;
        User: {
            id: components["schemas"]["UserID"];
            nickname: string;
            avatar: string;
            image: {
                x160?: string;
                x148?: string;
                x80?: string;
                x64?: string;
                x48?: string;
                x32?: string;
                x16?: string;
            };
            /** Format: date-time */
            last_online_at: string;
            url: string;
        };
        Users: components["schemas"]["User"][];
        UserInfo: {
            id: components["schemas"]["UserID"];
            nickname: string;
            avatar: string;
            image: {
                x160?: string;
                x148?: string;
                x80?: string;
                x64?: string;
                x48?: string;
                x32?: string;
                x16?: string;
            };
            /** Format: date-time */
            last_online_at: string;
            url: string;
            name: string | null;
            sex: string | null;
            full_years: number | null;
            last_online: string | null;
            website: string | null;
        };
        UserRates: {
            id: number;
            user_id: components["schemas"]["UserID"];
            target_id: number;
            /** @enum {string} */
            target_type: "Anime" | "Mange";
            score: number;
            /** @enum {string} */
            status: "planned" | "watching" | "rewatching" | "completed" | "on_hold" | "dropped";
            rewatches: number;
            episodes: number;
            volumes: number;
            chapters: number;
            text: string | null;
            text_html: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * @description The ID of the anime
         * @example 21
         */
        AnimeID: number;
        AnimeList: {
            id: components["schemas"]["AnimeID"];
            /** @description The name of the anime */
            name: string;
            /** @description The Russian name of the anime */
            russian: string;
            /** @description The image details of the anime */
            image: {
                /** @description The URL of the original image */
                original: string;
                /** @description The URL of the preview image */
                preview: string;
                /** @description The URL of the 96x96 image */
                x96: string;
                /** @description The URL of the 48x48 image */
                x48: string;
            };
            /** @description The URL of the anime */
            url: string;
            /** @description The kind of the anime (e.g., tv) */
            kind: string;
            /** @description The score of the anime */
            score: string;
            /** @description The status of the anime (e.g., released) */
            status: string;
            /** @description The total number of episodes */
            episodes: number;
            /** @description The number of episodes aired */
            episodes_aired: number;
            /**
             * Format: date-time
             * @description The date when the anime aired
             */
            aired_on: string;
            /**
             * Format: date-time
             * @description The date when the anime was released
             */
            released_on?: string | null;
        }[];
        Anime: {
            id: components["schemas"]["AnimeID"];
            /** @description The name of the anime */
            name: string;
            /** @description The Russian name of the anime */
            russian: string;
            /** @description The image details of the anime */
            image: {
                /** @description The URL of the original image */
                original: string;
                /** @description The URL of the preview image */
                preview: string;
                /** @description The URL of the 96x96 image */
                x96: string;
                /** @description The URL of the 48x48 image */
                x48: string;
            };
            /** @description The URL of the anime */
            url: string;
            /** @description The kind of the anime (e.g., tv) */
            kind: string;
            /** @description The score of the anime */
            score: string;
            /** @description The status of the anime (e.g., released) */
            status: string;
            /** @description The total number of episodes */
            episodes: number;
            /** @description The number of episodes aired */
            episodes_aired: number;
            /**
             * Format: date-time
             * @description The date when the anime aired
             */
            aired_on: string;
            /**
             * Format: date-time
             * @description The date when the anime was released
             */
            released_on?: string | null;
            /** @description The rating of the anime */
            rating: string;
            /** @description The English names of the anime */
            english: (string | null)[];
            /** @description The Japanese names of the anime */
            japanese: (string | null)[];
            /** @description The synonyms of the anime */
            synonyms: string[];
            /** @description The Russian license name of the anime */
            license_name_ru?: string | null;
            /** @description The duration of the anime */
            duration: number;
            /** @description The description of the anime */
            description?: string | null;
            /** @description The HTML description of the anime */
            description_html: string;
            /** @description The source of the description */
            description_source?: string | null;
            /** @description The franchise of the anime */
            franchise?: string | null;
            /** @description Indicates whether the anime is favoured */
            favoured: boolean;
            /** @description Indicates whether the anime is anons */
            anons: boolean;
            /** @description Indicates whether the anime is ongoing */
            ongoing: boolean;
            /** @description The thread ID of the anime */
            thread_id: number;
            /** @description The topic ID of the anime */
            topic_id: number;
            /** @description The MyAnimeList ID of the anime */
            myanimelist_id: number;
            /** @description The rates scores stats of the anime */
            rates_scores_stats: unknown[];
            /** @description The rates statuses stats of the anime */
            rates_statuses_stats: unknown[];
            /**
             * Format: date-time
             * @description The timestamp when the anime was last updated
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the next episode will air
             */
            next_episode_at?: string | null;
            /** @description The fansubbers of the anime */
            fansubbers: unknown[];
            /** @description The fandubbers of the anime */
            fandubbers: unknown[];
            /** @description The licensors of the anime */
            licensors: unknown[];
            /** @description The genres of the anime */
            genres: unknown[];
            /** @description The studios of the anime */
            studios: unknown[];
            /** @description The videos of the anime */
            videos: unknown[];
            /** @description The screenshots of the anime */
            screenshots: unknown[];
            /** @description The user rate of the anime */
            user_rate?: number | null;
        };
    };
    responses: {
        /** @description The given parameters could not be parsed */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BadRequest"];
            };
        };
        /** @description Authentication failed */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Unauthorized"];
            };
        };
        /** @description Access denied */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Forbidden"];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NotFound"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
